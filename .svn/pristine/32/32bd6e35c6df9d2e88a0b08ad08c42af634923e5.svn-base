package com.baoguan.biz.ytg;import com.baoguan.biz.ytg.entity.YTG_passgoods;import com.baoguan.tools.HttpTransfer;import com.baoguan.tools.JsonUtils;import java.util.HashMap;import java.util.List;import java.util.Map;/** * 易通关业务 * @author  zhangyang */public class YiTGBiz {    private String getRandom(){        return String.valueOf(Math.random());    }//    private Map<String,String> getHeader(){//        Cookie cookie = new YTGCookie();//        ((YTGCookie) cookie).setCookie("");//        cookie.getHeaderMap();////        return cookie.getHeaderMap();//    }    private Map<String,String> getHeader(){        Map<String,String> headerMap = new HashMap<>();        headerMap.put("Cookie","JSESSIONID=E3943BBCD713F17DEDABE1B588A02F5A");        headerMap.put("User-Agent","Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.132 Safari/537.36");        headerMap.put("Accept","text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8");        headerMap.put("Accept-Encoding","gzip, deflate, br");        headerMap.put("Accept-Language","zh-CN,zh;q=0.9");        return headerMap;    }    /**     * @Author zhangyang     * @Description //集装箱检索     * @Date 11:04 2019/3/2     * @param condation     * @param headerMap     * @return java.lang.String     **/    public String getBerthByBoxNo(String condation, Map<String,String> headerMap){        String url = "https://sz.91etg.com:8087/etgmanifestplatform/mfPrepare/searchByContaNo.action";        String a = getRandom();        String _condation = condation;        String con = "a="+a+"&contid="+condation;        headerMap = this.getHeader();        String data  = HttpTransfer.httpGet(url,con,headerMap);        System.out.println(data);        return data;    }    /**     * @Author zhangyang     * @Description // 通过该请求返回查询数据的jsessionid     * @Date 11:05 2019/3/2     * @param     * @return java.lang.String     **/    public String getUrlHeader(){        Map<String,String> headerMap = getHeader();        String sessionID = headerMap.get("Cookie");        String url = "https://sz.91etg.com:8087/etgmanifestplatform/mfPrepare/list.action?ucSessionId="+sessionID.substring(11,sessionID.length());        String data  = HttpTransfer.httpGet(url,null,this.getHeader());        System.out.println(data);        return data;    }    /**     * @Author zhangyang     * @Description //获取卸货港的数据，该处有5万多条，目前按照原始页面请求发送的，以后可以先请求查看页数，然后再请求所有页     * @Date 11:07 2019/3/2     * @param     * @return java.util.List<com.baoguan.biz.ytg.entity.YTG_passgoods>     **/    public YTG_passgoods getPassGoods(){        String con = this.getRandom();        String url = "https://sz.91etg.com:8087/etgmanifestplatform/locationToInfo/getData.action?a="+con;        Map<String,String> dataMap = new HashMap<>();        dataMap.put("page","1");        dataMap.put("rows","15");        String data = HttpTransfer.doPost(url,this.getHeader(),dataMap);        System.out.println(data);        YTG_passgoods list = JsonUtils.jsonToObject(data,YTG_passgoods.class);        return list;    }    /**     * @Author zhangyang     * @Description //修改的连接     * @Date 11:11 2019/3/2     * @param dataMap     * @return void     **/    public void update(Map<String,String> dataMap){        String url = "https://sz.91etg.com:8087/etgmanifestplatform/mfPrepare/update.action";        String data = HttpTransfer.doPost(url,this.getHeader(),dataMap);    }    /**     * @Author zhangyang     * @Description //新增     * @Date 12:47 2019/3/6     * @param dataMap     * @return void     **/    public void insert(Map<String,String> dataMap){        String url = "https://sz.91etg.com:8087/etgmanifestplatform/mfPrepare/insert.action";        dataMap.put("mfPrepare.preSaveTime","");        dataMap.put("mfPrepare.shipNameEn:","");        dataMap.put("mfPrepare.shipId","");        dataMap.put("mfPrepare.declareOutDate","");        dataMap.put("mfPrepare.mfPrepareBill.loadingDate","");        dataMap.put("mfPrepare.voyNo","");        dataMap.put("mfPrepare.docSender","");        dataMap.put("mfPrepare.imocode","");        dataMap.put("mfPrepare.mfPrepareBill.dischPort","");        dataMap.put("mfPrepare.mfPrepareBill.shipAgencyCode","");        dataMap.put("mfPrepare.mfPrepareBill.carrierId","");        dataMap.put("mfPrepare.deptCustCodeCnName","");        dataMap.put("mfPrepare.deptCustCode","");        dataMap.put("mfPrepare.cutoffDate","");        dataMap.put("mfPrepare.billId","");        dataMap.put("shipmentBillIdVo.year","");        dataMap.put("shipmentBillIdVo.monthAndDay","");        dataMap.put("shipmentBillIdVo.lastFourNo","");        dataMap.put("mfPrepare.mfPrepareBill.shipmentBillId","");        dataMap.put("mfPrepare.mfPrepareBill.customsId","");        dataMap.put("shipmentBillIdVo.isAuthorize","");        dataMap.put("shipmentBillIdVo.isAutoSectionNo","");        dataMap.put("mfPrepare.mfPrepareBill.bookingnum","");        dataMap.put("mfPrepare.declType","");        dataMap.put("mfPrepare.mfPrepareBill.tradeMode","");        dataMap.put("mfPrepare.mfPrepareBill.tradeModeName","");        dataMap.put("mfPrepare.mfPrepareBill.ownerCodeSelect","");        dataMap.put("mfPrepare.mfPrepareBill.ownerCodeValue","");        dataMap.put("mfPrepare.mfPrepareBill.ownerCode","");        dataMap.put("mfPrepare.mfPrepareBill.ownerName","");        dataMap.put("mfPrepare.mfPrepareBill.ownerAddress","");        dataMap.put("mfPrepare.mfPrepareBill.ownerCommCode","");        dataMap.put("mfPrepare.mfPrepareBill.ownerPhone","");        dataMap.put("mfPrepare.mfPrepareBill.consigneeCodeSelect","");        dataMap.put("mfPrepare.mfPrepareBill.consigneeCodeValue","");        dataMap.put("mfPrepare.mfPrepareBill.consigneeCode","");        dataMap.put("mfPrepare.mfPrepareBill.consignee","");        dataMap.put("mfPrepare.mfPrepareBill.consigneeAddress","");        dataMap.put("mfPrepare.mfPrepareBill.consigneeCommCode","");        dataMap.put("mfPrepare.mfPrepareBill.consigneePhone","");        dataMap.put("mfPrepare.mfPrepareBill.notifyCodeSelect","");        dataMap.put("mfPrepare.mfPrepareBill.notifyCodeValue","");        dataMap.put("mfPrepare.mfPrepareBill.notifyCode","");        dataMap.put("mfPrepare.mfPrepareBill.notifyParty","");        dataMap.put("mfPrepare.mfPrepareBill.notifyAddress","");        dataMap.put("mfPrepare.mfPrepareBill.notifyCommCode","");        dataMap.put("mfPrepare.mfPrepareBill.notifyPhone","");        dataMap.put("mfPrepare.mfPrepareBill.notifyCountryCode","");        dataMap.put("mfPrepare.mfPrepareBill.ifRefundDuty","");        dataMap.put("mfPrepare.firstArriveDock","");        dataMap.put("mfPrepare.mfPrepareBill.consigneeCountryCode","");        dataMap.put("mfPrepare.mfPrepareBill.deliveryCode","");        dataMap.put("mfPrepare.mfPrepareBill.packNo","");        dataMap.put("mfPrepare.mfPrepareBill.wrapType","");        dataMap.put("mfPrepare.mfPrepareBill.wrapTypeName","");        dataMap.put("mfPrepare.mfPrepareBill.grossWt","");        dataMap.put("mfPrepare.mfPrepareBill.ifundg","");        dataMap.put("mfPrepare.mfPrepareBill.undgcontactname","");        dataMap.put("mfPrepare.mfPrepareBill.undgcontacttel","");        dataMap.put("mfPrepare.mfPrepareBill.subBillId","");        dataMap.put("mfPrepare.mfPrepareBill.cargoStatusCode","");        dataMap.put("mfPrepare.mfPrepareBill.consignorAeo","");        dataMap.put("mfPrepare.mfPrepareBill.consigneeAeo","");        dataMap.put("mfPrepare.mfPrepareBill.chargeMethodCode","");        dataMap.put("mfPrepare.mfPrepareBill.carrigeContractCode","");        dataMap.put("mfPrepare.mfPrepareBill.ifBulk","");        dataMap.put("mfPrepare.mfPrepareBill.ifColdStorage","");        dataMap.put("mfPrepare.mfPrepareBill.transStartPlace","");        dataMap.put("mfPrepare.mfPrepareBill.transTargetPlace","");        dataMap.put("mfPrepare.mfPrepareBill.volume","");        dataMap.put("contaSeqNo","");        for(int i = 0;i<2;i++){            dataMap.put("mfPrepare.mfPrepareContas["+i+"].contaId","");            dataMap.put("mfPrepare.mfPrepareContas["+i+"].contaType","");            dataMap.put("mfPrepare.mfPrepareContas["+i+"].contaTypeCnName","");            dataMap.put("mfPrepare.mfPrepareContas["+i+"].fle","");            dataMap.put("mfPrepare.mfPrepareContas["+i+"].fleCnName","");            dataMap.put("mfPrepare.mfPrepareContas["+i+"].sealNoCa","");            dataMap.put("mfPrepare.mfPrepareContas["+i+"].sealType","");            dataMap.put("mfPrepare.mfPrepareContas["+i+"].sealCode","");            dataMap.put("mfPrepare.mfPrepareContas["+i+"].sealCodeCnName","");            dataMap.put("mfPrepare.mfPrepareContas["+i+"].contaSupplierType","");            dataMap.put("mfPrepare.mfPrepareContas["+i+"].contaSupplierTypeCnName","");        }        for(int i = 0 ;i<2;i++){            dataMap.put("mfPrepare.mfPrepareCargos["+i+"].cargoSeqNo","");            dataMap.put("mfPrepare.mfPrepareCargos["+i+"].mainGoodsName","");            dataMap.put("mfPrepare.mfPrepareCargos["+i+"].packNo","");            dataMap.put("mfPrepare.mfPrepareCargos["+i+"].wrapType","");            dataMap.put("mfPrepare.mfPrepareCargos["+i+"].grossWt","");            dataMap.put("mfPrepare.mfPrepareCargos["+i+"].whatConta","");            dataMap.put("mfPrepare.mfPrepareCargos["+i+"].mark","");            dataMap.put("mfPrepare.mfPrepareCargos["+i+"].undgcode","");        }        HttpTransfer.doPost(url,this.getHeader(),dataMap);    }    /**     * @Author zhangyang     * @Description //申报得请求     * @Date 11:17 2019/3/2     * @param firmId     * @return void     **/    public void sendSB(String firmId){        String url = "https://sz.91etg.com:8087/etgmanifestplatform/mfPrepare/send.action?mfPrepare.id=20004981844";        Map<String,String> dataMap = new HashMap<>();        dataMap.put("mfPrepare.id",firmId);        String data = HttpTransfer.doPost(url,this.getHeader(),dataMap);    }    public static void main(String[] args) {        YiTGBiz t = new YiTGBiz();//        t.getPassGoods();        t.getUrlHeader();//        t.getBerthByBoxNo("YMLU8772365",null);    }}